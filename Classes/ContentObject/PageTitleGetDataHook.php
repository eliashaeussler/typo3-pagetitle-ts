<?php
declare(strict_types=1);
namespace Undkonsorten\PagetitleTs\ContentObject;

/**
 * This file is part of the TYPO3 CMS extension "pagetitle_ts".
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */

use TYPO3\CMS\Core\Cache\Exception;
use TYPO3\CMS\Core\Cache\Exception\InvalidDataException;
use TYPO3\CMS\Core\PageTitle\PageTitleProviderManager;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Frontend\ContentObject\ContentObjectGetDataHookInterface;
use TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer;
use TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController;

/**
 * Hook to TypoScript's "getData()" with final page title.
 *
 * This class extends the {@see ContentObjectRenderer::getData()} function by providing functionality
 * to insert the final page title, generated by the PageTitle API. Additionally, the TypoScript
 * page title configuration "config.pageTitle" will be applied to the raw page title.
 * Use it as follows in your TypoScript:
 *
 * <code>
 *   # Insert page title as og:title meta tag
 *   page.meta {
 *     og:title {
 *       data = page:title
 *     }
 *   }
 *
 *   # Custom page title configuration (optional)
 *   config.pageTitle {
 *     append = TEXT
 *     append.value = my site
 *     append.noTrimWrap = | - ||
 *   }
 * </code>
 * <output>
 *   <meta property="og:title" content="My page title - my site" />
 * </output>
 *
 * @author Elias Häußler <elias.haeussler@undkonsorten.com>
 * @license GPL-2.0+
 */
class PageTitleGetDataHook implements ContentObjectGetDataHookInterface
{
    /** @var string TypoScript section identifier for getData() hook */
    const GET_DATA_STRING = 'page:title';

    /**
     * {@inheritdoc}
     */
    public function getDataExtension($getDataString, array $fields, $sectionValue, $returnValue, ContentObjectRenderer &$parentObject)
    {
        if ($sectionValue === self::GET_DATA_STRING) {
            try {
                $pageTitleProviderManager = GeneralUtility::makeInstance(PageTitleProviderManager::class);
                $pageTitle = $pageTitleProviderManager->getTitle();

                if ($pageTitle !== '') {
                    $returnValue = $this->applyTypoScriptConfiguration((string) $pageTitle);
                }
            } catch (InvalidDataException | Exception $e) {
                $returnValue = $this->getTypoScriptFrontendController()->generatePageTitle();
            }
        }

        return $returnValue;
    }

    /**
     * Apply TypoScript page title configuration.
     *
     * Applies the TypoScript "config.pageTitle" configuration on the provided page title,
     * if it's not empty. This simulates the default behaviour of TSFE in order to generate
     * consistent contents across <title> and <meta> tags.
     *
     * @param string $pageTitle Raw page title, built from PageTitle API
     * @return string Page title, combined with TypoScript page title configuration
     */
    protected function applyTypoScriptConfiguration(string $pageTitle): string
    {
        if ($pageTitle !== '') {
            $typoScriptFrontendController = $this->getTypoScriptFrontendController();
            $config = $typoScriptFrontendController->config['config'];

            if (isset($config['pageTitle.']) && is_array($config['pageTitle.'])) {
                $pageTitle = $typoScriptFrontendController->cObj->stdWrap($pageTitle, $config['pageTitle.']);
            }
        }

        return $pageTitle;
    }

    /**
     * @return TypoScriptFrontendController
     */
    protected function getTypoScriptFrontendController(): TypoScriptFrontendController
    {
        return $GLOBALS['TSFE'];
    }
}
